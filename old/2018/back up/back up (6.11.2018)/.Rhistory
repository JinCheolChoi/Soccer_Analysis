pseudo_Y=matrix(0,nrow(Y),2)
pseudo_Y[,1]=Y[,j]
P_Result_Sqaure_Cor_Original_Gene_Based[i,j]=coeffRV(pseudo_X,pseudo_Y)$p.value
#pseudo_X=matrix(0,nrow(X),2)
pseudo_X=X_New[,Index]
if(length(Index)==1){
pseudo_X=matrix(0,nrow(X),2)
pseudo_X[,1]=X_New[,Index]
}
pseudo_Y=matrix(0,nrow(Y),2)
pseudo_Y[,1]=Y_New[,j]
P_Result_Sqaure_Cor_Standardized_Gene_Based[i,j]=coeffRV(pseudo_X,pseudo_Y)$p.value
print(paste0("i :",i,", j : ",j))
}
}
})[3]
Gene_Num
time=c()
rm(list=ls())                         # Empty the workspace        #
source("Research_Function.R")         # Install the package        #
source("Research_Fundamental.R")      # Import fundamental dataset #
X=genosCN_Del
Y=phenosCN_Original
X_New=scale(X,scale=TRUE,center=TRUE)
Y_New=scale(Y,scale=TRUE,center=TRUE)
par(mfrow=c(3,1))
Contribution_Plot(X_New, Y_New, Alpha=1, Method=1, Thresh=TRUE, nrep=100)
title(main=paste0("<Real Data> Estimated Contribution with Alpha=1"), col.main="red", font.main=4)
Est_Contribution
Est_Contribution(X_New, Y_New)
plot(Est_Contribution(X_New, Y_New))
Y_New
X_New
Gene_Based_Manhattan_Plot(P_Result_Sqaure_Cor_Original_Gene_Based,by="Brain") # sorted by Brain
load(paste0("Manhattan.Rdata"))
Gene_Based_Manhattan_Plot(P_Result_Sqaure_Cor_Original_Gene_Based,by="Brain") # sorted by Brain
Gene_Based_Manhattan_Plot(P_Result_Sqaure_Cor_Original_Gene_Based,by="Gene")  # sorted by Gene
Manhattan_Plot(P_Result_Cor_Original, by="Brain")   # sorted by Brain
Manhattan_Plot(P_Result_Cor_Original, by="SNP")     # sorted by SNP
Manhattan_Plot(P_Result_Sqaure_Cor_Original, by="Brain")   # sorted by Brain
Manhattan_Plot(P_Result_Sqaure_Cor_Original, by="SNP")     # sorted by SNP
Gene_Based_Manhattan_Plot
Gene_Based_Manhattan_Plot(P_Result_Sqaure_Cor_Original_Gene_Based,by="Brain") # sorted by Brain
Gene_Based_Manhattan_Plot(P_Result_Sqaure_Cor_Original_Gene_Based,by="Gene")  # sorted by Gene
Gene_Based_Manhattan_Plot(P_Result_Sqaure_Cor_Original_Gene_Based,by="Brain") # sorted by Brain
Manhattan_Plot(P_Result_Cor_Original, by="Brain")   # sorted by Brain
Manhattan_Plot(P_Result_Cor_Original, by="SNP")     # sorted by SNP
Manhattan_Plot(P_Result_Sqaure_Cor_Original, by="Brain")   # sorted by Brain
Manhattan_Plot(P_Result_Sqaure_Cor_Original, by="SNP")     # sorted by SNP
#######################################
### Manhattan plot (by brain region)
#######################################
Manhattan_Plot(P_Result_Cor_Original, by="Brain")   # sorted by Brain
Manhattan_Plot(P_Result_Cor_Original, by="SNP")     # sorted by SNP
Manhattan_Plot(P_Result_Sqaure_Cor_Original, by="Brain")   # sorted by Brain
Manhattan_Plot(P_Result_Sqaure_Cor_Original, by="SNP")     # sorted by SNP
Manhattan_Plot(P_Result_Cor_Original, by="SNP")     # sorted by SNP
P_Result_Sqaure_Cor_Original
which(P_Result_Sqaure_Cor_Original[,52]<0.05/(X_Num*Y_Num))
which(P_Result_Sqaure_Cor_Original[,54]<0.05/(X_Num*Y_Num))
which(P_Result_Sqaure_Cor_Original[,56]<0.05/(X_Num*Y_Num))
sum(-log10(P_Result_Sqaure_Cor_Original[116,]))
Manhattan_Plot(P_Result_Sqaure_Cor_Original, by="Brain")   # sorted by Brain
par(mfrow=c(4,1))
Contribution_Plot(X_New, Y_New, Alpha=1, Method=2)
title(main=paste0("<Real Data> Estimated Contribution with Alpha=1"), col.main="red", font.main=4)
Contribution_Plot(X_Boot_New, Y_Boot_New, Alpha=1, Method=2)
title(main=paste0("<Real Data> Estimated Contribution Bootstrap with Alpha=1"), col.main="red", font.main=4)
plot(apply(-log10(P_Result_Sqaure_Cor_Standardized), 1, sum),type='l', ylab="-log(P_value)", xlab="SNP")
title(main=paste0("<Real Data> Sum of -log(P-value)"), col.main="red", font.main=4)
P_Result_Sqaure_Cor_Standardized
Manhattan_Plot(P_Result_Sqaure_Cor_Standardized, by="Brain")   # sorted by Brain
Manhattan_Plot(P_Result_Sqaure_Cor_Original, by="Brain")   # sorted by Brain
Manhattan_Plot(P_Result_Sqaure_Cor_Standardized, by="Brain")   # sorted by Brain
P_Result_Sqaure_Cor_Standardized
pvalue
plot(P_Result_Sqaure_Cor_Standardized, pch=20, ylim=c(0,10), xaxt="n", xlab="SNPs",ylab="-log10(p)",
col=c(rep("red3",Y_Num),rep("orange3",Y_Num),rep("yellow3",Y_Num),rep("green3",Y_Num),rep("blue3",Y_Num),rep("purple3",Y_Num)))
par(mfrow=c(4,1))
Contribution_Plot(X_New, Y_New, Alpha=1, Method=2)
title(main=paste0("<Real Data> Estimated Contribution with Alpha=1"), col.main="red", font.main=4)
Contribution_Plot(X_Boot_New, Y_Boot_New, Alpha=1, Method=2)
par(mfrow=c(3,1))
Contribution_Plot(X_New, Y_New, Alpha=1, Method=1, Thresh=TRUE, nrep=100)
X=genosCN_Del
Y=phenosCN_Original
X_New=scale(X,scale=TRUE,center=TRUE)
Y_New=scale(Y,scale=TRUE,center=TRUE)
par(mfrow=c(3,1))
Contribution_Plot(X_New, Y_New, Alpha=1, Method=1, Thresh=TRUE, nrep=100)
Manhattan_Plot(P_Result_Sqaure_Cor_Original, by="Brain")   # sorted by Brain
Manhattan_Plot(P_Result_Sqaure_Cor_Original, by="SNP")     # sorted by SNP
rm(list=ls())                         # Empty the workspace        #
source("Research_Function.R")         # Install the package        #
source("Research_Fundamental.R")      # Import fundamental dataset #
X=genosCN_Del
Y=phenosCN_Original
X_New=scale(X,scale=TRUE,center=TRUE)
Y_New=scale(Y,scale=TRUE,center=TRUE)
Gene_list=unique(Snp_Membership_Del$GENE)
X_Num=ncol(X)
Y_Num=ncol(Y)
Gene_Num=length(Gene_list)
P_Result_Cor_Original=matrix(0,X_Num,Y_Num)                  # pearson correlation
P_Result_Cor_Standardized=matrix(0,X_Num,Y_Num)              # standardized pearson correlation
P_Result_Sqaure_Cor_Original=matrix(0,X_Num,Y_Num)           # squared pearson correlation
P_Result_Sqaure_Cor_Standardized=matrix(0,X_Num,Y_Num)       # standardized squared pearson correlation
P_Result_Sqaure_Cor_Original_Gene_Based=matrix(0,Gene_Num,Y_Num)           # squared pearson correlation
P_Result_Sqaure_Cor_Standardized_Gene_Based=matrix(0,Gene_Num,Y_Num)       # standardized squared pearson correlation
time=c()
time=system.time({
for(i in 1:X_Num){
for(j in 1:Y_Num){
pseudo_X=matrix(0,nrow(X),2)
pseudo_X[,1]=X[,i]
pseudo_Y=matrix(0,nrow(Y),2)
pseudo_Y[,1]=Y[,j]
P_Result_Sqaure_Cor_Original[i,j]=coeffRV(pseudo_X,pseudo_Y)$p.value
pseudo_X=matrix(0,nrow(X),2)
pseudo_X[,1]=X_New[,i]
pseudo_Y=matrix(0,nrow(Y),2)
pseudo_Y[,1]=Y_New[,j]
P_Result_Cor_Standardized[i,j]=cor.test(X_New[,i],Y_New[,j],alternative="two.sided",method="pearson")$p.value
P_Result_Sqaure_Cor_Standardized[i,j]=coeffRV(pseudo_X,pseudo_Y)$p.value
print(paste0("i :",i,", j : ",j))
}
}
})[3]
rm(list=ls())                         # Empty the workspace        #
source("Research_Function.R")         # Install the package        #
source("Research_Fundamental.R")      # Import fundamental dataset #
X=genosCN_Del
Y=phenosCN_Original
X_New=scale(X,scale=TRUE,center=TRUE)
Y_New=scale(Y,scale=TRUE,center=TRUE)
Est_Contribution()
Est_Contribution
par(mfrow=c(3,1))
Contribution_Plot(X_New, Y_New, Alpha=1, Method=1, Thresh=TRUE, nrep=100)
title(main=paste0("<Real Data> Estimated Contribution with Alpha=1"), col.main="red", font.main=4)
Contribution_Plot(X_New, Y_New, Alpha=2, Method=2, Thresh=TRUE, nrep=100)
title(main=paste0("<Real Data> Estimated Contribution with Alpha=2"), col.main="red", font.main=4)
cov(X_New,Y_New)^(2*1)
plot(cov(X_New,Y_New)^(2*1))
cov(X_New,Y_New)^(2*1)
test=cov(X_New,Y_New)^(2*1)
test[,1]
test[1,]
c(test[1,],test[2,])
plot(c(test[1,],test[2,]))
pl=c()
for(i in 1:nrow(test)){
pl=c(pl,test[i,])
}
plot(c(test[1,],test[2,]))
pl
pl(c(test[1,],test[2,]))
plot(pl)
pl
pvalue
Contribution_Plot(X_New, Y_New, Alpha=1, Method=2)
title(main=paste0("<Real Data> Estimated Contribution with Alpha=1"), col.main="red", font.main=4)
Contribution_Plot(X_Boot_New, Y_Boot_New, Alpha=1, Method=2)
title(main=paste0("<Real Data> Estimated Contribution Bootstrap with Alpha=1"), col.main="red", font.main=4)
rm(list=ls())                         # Empty the workspace        #
source("Research_Function.R")         # Install the package        #
source("Research_Fundamental.R")      # Import fundamental dataset #
rm(list=ls())                         # Empty the workspace        #
source("Research_Function.R")         # Install the package        #
#lapply(c("rtracklayer","GenomicRanges","chopsticks"), biocLite)   #
source("Research_Fundamental.R")      # Import fundamental dataset #
####################################################################
#################################################################
### Standardizing X and Y
#################################################################
X=genosCN_Del
Y=phenosCN_Original
X_New=scale(X,scale=TRUE,center=TRUE)
Y_New=scale(Y,scale=TRUE,center=TRUE)
#################################################################
### Computation of p-values
#################################################################
Gene_list=unique(Snp_Membership_Del$GENE)
X_Num=ncol(X)
Y_Num=ncol(Y)
Gene_Num=length(Gene_list)
P_Result_Cor_Original=matrix(0,X_Num,Y_Num)                  # pearson correlation
P_Result_Cor_Standardized=matrix(0,X_Num,Y_Num)              # standardized pearson correlation
P_Result_Sqaure_Cor_Original=matrix(0,X_Num,Y_Num)           # squared pearson correlation
P_Result_Sqaure_Cor_Standardized=matrix(0,X_Num,Y_Num)       # standardized squared pearson correlation
P_Result_Sqaure_Cor_Original_Gene_Based=matrix(0,Gene_Num,Y_Num)           # squared pearson correlation
P_Result_Sqaure_Cor_Standardized_Gene_Based=matrix(0,Gene_Num,Y_Num)       # standardized squared pearson correlation
####### p.value
time=c()
time=system.time({
for(i in 1:X_Num){
for(j in 1:Y_Num){
pseudo_X=matrix(0,nrow(X),2)
pseudo_X[,1]=X[,i]
pseudo_Y=matrix(0,nrow(Y),2)
pseudo_Y[,1]=Y[,j]
P_Result_Sqaure_Cor_Original[i,j]=coeffRV(pseudo_X,pseudo_Y)$p.value
pseudo_X=matrix(0,nrow(X),2)
pseudo_X[,1]=X_New[,i]
pseudo_Y=matrix(0,nrow(Y),2)
pseudo_Y[,1]=Y_New[,j]
P_Result_Cor_Standardized[i,j]=cor.test(X_New[,i],Y_New[,j],alternative="two.sided",method="pearson")$p.value
P_Result_Sqaure_Cor_Standardized[i,j]=coeffRV(pseudo_X,pseudo_Y)$p.value
print(paste0("i :",i,", j : ",j))
}
}
})[3]
####### gene-based p.value
time=c()
time=system.time({
for(i in 1:Gene_Num){
for(j in 1:Y_Num){
Index=which(Snp_Membership_Del$GENE==Gene_list[i])
#pseudo_X=matrix(0,nrow(X),2)
pseudo_X=X[,Index]
if(length(Index)==1){
pseudo_X=matrix(0,nrow(X),2)
pseudo_X[,1]=X[,Index]
}
pseudo_Y=matrix(0,nrow(Y),2)
pseudo_Y[,1]=Y[,j]
P_Result_Sqaure_Cor_Original_Gene_Based[i,j]=coeffRV(pseudo_X,pseudo_Y)$p.value
#pseudo_X=matrix(0,nrow(X),2)
pseudo_X=X_New[,Index]
if(length(Index)==1){
pseudo_X=matrix(0,nrow(X),2)
pseudo_X[,1]=X_New[,Index]
}
pseudo_Y=matrix(0,nrow(Y),2)
pseudo_Y[,1]=Y_New[,j]
P_Result_Sqaure_Cor_Standardized_Gene_Based[i,j]=coeffRV(pseudo_X,pseudo_Y)$p.value
print(paste0("i :",i,", j : ",j))
}
}
})[3]
rm(list=ls())                         # Empty the workspace        #
source("Research_Function.R")         # Install the package        #
#lapply(c("rtracklayer","GenomicRanges","chopsticks"), biocLite)   #
source("Research_Fundamental.R")      # Import fundamental dataset #
####################################################################
#################################################################
### Standardizing X and Y
#################################################################
X=genosCN_Del
Y=phenosCN_Original
X_New=scale(X,scale=TRUE,center=TRUE)
Y_New=scale(Y,scale=TRUE,center=TRUE)
#################################################################
### Computation of p-values
#################################################################
Gene_list=unique(Snp_Membership_Del$GENE)
X_Num=ncol(X)
Y_Num=ncol(Y)
Gene_Num=length(Gene_list)
P_Result_Cor_Original=matrix(0,X_Num,Y_Num)                  # pearson correlation
P_Result_Cor_Standardized=matrix(0,X_Num,Y_Num)              # standardized pearson correlation
P_Result_Sqaure_Cor_Original=matrix(0,X_Num,Y_Num)           # squared pearson correlation
P_Result_Sqaure_Cor_Standardized=matrix(0,X_Num,Y_Num)       # standardized squared pearson correlation
P_Result_Sqaure_Cor_Original_Gene_Based=matrix(0,Gene_Num,Y_Num)           # squared pearson correlation
P_Result_Sqaure_Cor_Standardized_Gene_Based=matrix(0,Gene_Num,Y_Num)       # standardized squared pearson correlation
####### p.value
time=c()
time=system.time({
for(i in 1:X_Num){
for(j in 1:Y_Num){
pseudo_X=matrix(0,nrow(X),2)
pseudo_X[,1]=X[,i]
pseudo_Y=matrix(0,nrow(Y),2)
pseudo_Y[,1]=Y[,j]
P_Result_Sqaure_Cor_Original[i,j]=coeffRV(pseudo_X,pseudo_Y)$p.value
pseudo_X=matrix(0,nrow(X),2)
pseudo_X[,1]=X_New[,i]
pseudo_Y=matrix(0,nrow(Y),2)
pseudo_Y[,1]=Y_New[,j]
P_Result_Cor_Standardized[i,j]=cor.test(X_New[,i],Y_New[,j],alternative="two.sided",method="pearson")$p.value
P_Result_Sqaure_Cor_Standardized[i,j]=coeffRV(pseudo_X,pseudo_Y)$p.value
print(paste0("i :",i,", j : ",j))
}
}
})[3]
####### gene-based p.value
time=c()
time=system.time({
for(i in 1:Gene_Num){
for(j in 1:Y_Num){
Index=which(Snp_Membership_Del$GENE==Gene_list[i])
#pseudo_X=matrix(0,nrow(X),2)
pseudo_X=X[,Index]
if(length(Index)==1){
pseudo_X=matrix(0,nrow(X),2)
pseudo_X[,1]=X[,Index]
}
pseudo_Y=matrix(0,nrow(Y),2)
pseudo_Y[,1]=Y[,j]
P_Result_Sqaure_Cor_Original_Gene_Based[i,j]=coeffRV(pseudo_X,pseudo_Y)$p.value
#pseudo_X=matrix(0,nrow(X),2)
pseudo_X=X_New[,Index]
if(length(Index)==1){
pseudo_X=matrix(0,nrow(X),2)
pseudo_X[,1]=X_New[,Index]
}
pseudo_Y=matrix(0,nrow(Y),2)
pseudo_Y[,1]=Y_New[,j]
P_Result_Sqaure_Cor_Standardized_Gene_Based[i,j]=coeffRV(pseudo_X,pseudo_Y)$p.value
print(paste0("i :",i,", j : ",j))
}
}
})[3]
save.image(paste0("Manhattan.Rdata"))
colnames(phenosCN_Original)[c(52, 54 ,56)]
cor(phenosCN_Original)
Gene_Based_Manhattan_Plot(P_Result_Sqaure_Cor_Original_Gene_Based,by="Brain") # sorted by Brain
Gene_Based_Manhattan_Plot(P_Result_Sqaure_Cor_Original_Gene_Based,by="Gene")  # sorted by Gene
Manhattan_Plot(P_Result_Cor_Original, by="Brain")   # sorted by Brain
Manhattan_Plot(P_Result_Cor_Original, by="SNP")     # sorted by SNP
Manhattan_Plot(P_Result_Cor_Original, by="Brain")   # sorted by Brain
P_Result_Cor_Original
P_Result_Cor_Standardized
P_Result_Sqaure_Cor_Original
P_Result_Sqaure_Cor_Standardized
P_Result_Sqaure_Cor_Original
P_Result_Cor_Original
X
P_Result_Cor_Original[i,j]=cor.test(X[,i],Y[,j],alternative="two.sided",method="pearson")$p.value
P_Result_Cor_Original[i,j]
Gene_Based_Manhattan_Plot(P_Result_Sqaure_Cor_Original_Gene_Based,by="Gene")  # sorted by Gene
Manhattan_Plot(P_Result_Cor_Original, by="SNP")     # sorted by SNP
Manhattan_Plot(P_Result_Sqaure_Cor_Original, by="Brain")   # sorted by Brain
Manhattan_Plot(P_Result_Sqaure_Cor_Original, by="SNP")     # sorted by SNP
rm(list=ls())                         # Empty the workspace        #
source("Research_Function.R")         # Install the package        #
#lapply(c("rtracklayer","GenomicRanges","chopsticks"), biocLite)   #
source("Research_Fundamental.R")      # Import fundamental dataset #
####################################################################
#################################################################
### Standardizing X and Y
#################################################################
X=genosCN_Del
Y=phenosCN_Original
X_New=scale(X,scale=TRUE,center=TRUE)
Y_New=scale(Y,scale=TRUE,center=TRUE)
#################################################################
### Computation of p-values
#################################################################
Gene_list=unique(Snp_Membership_Del$GENE)
X_Num=ncol(X)
Y_Num=ncol(Y)
Gene_Num=length(Gene_list)
P_Result_Cor_Original=matrix(0,X_Num,Y_Num)                  # pearson correlation
P_Result_Cor_Standardized=matrix(0,X_Num,Y_Num)              # standardized pearson correlation
P_Result_Sqaure_Cor_Original=matrix(0,X_Num,Y_Num)           # squared pearson correlation
P_Result_Sqaure_Cor_Standardized=matrix(0,X_Num,Y_Num)       # standardized squared pearson correlation
P_Result_Sqaure_Cor_Original_Gene_Based=matrix(0,Gene_Num,Y_Num)           # squared pearson correlation
P_Result_Sqaure_Cor_Standardized_Gene_Based=matrix(0,Gene_Num,Y_Num)       # standardized squared pearson correlation
####### p.value
time=c()
time=system.time({
for(i in 1:X_Num){
for(j in 1:Y_Num){
pseudo_X=matrix(0,nrow(X),2)
pseudo_X[,1]=X[,i]
pseudo_Y=matrix(0,nrow(Y),2)
pseudo_Y[,1]=Y[,j]
P_Result_Cor_Original[i,j]=cor.test(X[,i],Y[,j],alternative="two.sided",method="pearson")$p.value
P_Result_Sqaure_Cor_Original[i,j]=coeffRV(pseudo_X,pseudo_Y)$p.value
pseudo_X=matrix(0,nrow(X),2)
pseudo_X[,1]=X_New[,i]
pseudo_Y=matrix(0,nrow(Y),2)
pseudo_Y[,1]=Y_New[,j]
P_Result_Cor_Standardized[i,j]=cor.test(X_New[,i],Y_New[,j],alternative="two.sided",method="pearson")$p.value
P_Result_Sqaure_Cor_Standardized[i,j]=coeffRV(pseudo_X,pseudo_Y)$p.value
print(paste0("i :",i,", j : ",j))
}
}
})[3]
####### gene-based p.value
time=c()
time=system.time({
for(i in 1:Gene_Num){
for(j in 1:Y_Num){
Index=which(Snp_Membership_Del$GENE==Gene_list[i])
#pseudo_X=matrix(0,nrow(X),2)
pseudo_X=X[,Index]
if(length(Index)==1){
pseudo_X=matrix(0,nrow(X),2)
pseudo_X[,1]=X[,Index]
}
pseudo_Y=matrix(0,nrow(Y),2)
pseudo_Y[,1]=Y[,j]
P_Result_Sqaure_Cor_Original_Gene_Based[i,j]=coeffRV(pseudo_X,pseudo_Y)$p.value
#pseudo_X=matrix(0,nrow(X),2)
pseudo_X=X_New[,Index]
if(length(Index)==1){
pseudo_X=matrix(0,nrow(X),2)
pseudo_X[,1]=X_New[,Index]
}
pseudo_Y=matrix(0,nrow(Y),2)
pseudo_Y[,1]=Y_New[,j]
P_Result_Sqaure_Cor_Standardized_Gene_Based[i,j]=coeffRV(pseudo_X,pseudo_Y)$p.value
print(paste0("i :",i,", j : ",j))
}
}
})[3]
colnames(phenosCN_Original)[c(52, 54 ,56)]
cor(phenosCN_Original)
#######################################
### Gene-Based Manhattan plot
#######################################
Gene_Based_Manhattan_Plot(P_Result_Sqaure_Cor_Original_Gene_Based,by="Brain") # sorted by Brain
Gene_Based_Manhattan_Plot(P_Result_Sqaure_Cor_Original_Gene_Based,by="Gene")  # sorted by Gene
#######################################
### Manhattan plot (by brain region)
#######################################
Manhattan_Plot(P_Result_Cor_Original, by="Brain")   # sorted by Brain
Manhattan_Plot(P_Result_Cor_Original, by="SNP")     # sorted by SNP
Manhattan_Plot(P_Result_Sqaure_Cor_Original, by="Brain")   # sorted by Brain
Manhattan_Plot(P_Result_Sqaure_Cor_Original, by="SNP")     # sorted by SNP
########################
### Results
########################
which(P_Result_Sqaure_Cor_Original[,52]<0.05/(X_Num*Y_Num))
which(P_Result_Sqaure_Cor_Original[,54]<0.05/(X_Num*Y_Num))
which(P_Result_Sqaure_Cor_Original[,56]<0.05/(X_Num*Y_Num))
sum(-log10(P_Result_Sqaure_Cor_Original[116,]))
save.image(paste0("Manhattan.Rdata"))
rm(list=ls())                         # Empty the workspace        #
source("Research_Function.R")         # Install the package        #
source("Research_Fundamental.R")      # Import fundamental dataset #
N=101                                   # Case Number
rvcoe
RV.rtest
rm(list=ls())                         # Empty the workspace        #
source("Research_Function.R")         # Install the package        #
source("Research_Fundamental.R")      # Import fundamental dataset #
N=101                                   # Case Number
source("Research_Case_Compilation.R") # Import the case
Y_Original_New=scale(Y_Original, center=TRUE, scale=TRUE) # Standardize values in Y matrix by column
X_Original_New=scale(X_Original, center=TRUE, scale=TRUE) # Standardize values in X matrix by column
Y_Boot_New=scale(Y_Boot, center=TRUE, scale=TRUE) # Standardize values in Y matrix by column
X_Boot_New=scale(X_Boot, center=TRUE, scale=TRUE) # Standardize values in X matrix by column
X=X_Original
B_Star=B_Stand(X_Original,Y_Original,B)
for(i in 1:1){
par(mfrow=c(4,1))
plot(True_Contribution(B)$True_Contrib, type='l', ylab="Percentage",xlab="SNP")
title(main=paste0("<Case ",N,"> The true parameter in B matrix"), col.main="red", font.main=4)
plot(True_Contribution(B_Star)$True_Contrib, type='l', ylab="Percentage",xlab="SNP")
title(main=paste0("<Case ",N,"> The true parameter in B* matrix"), col.main="red", font.main=4)
#Contribution_Plot(X_Multi_New,Y_Multi_New,Alpha=(1))
#title(main=paste0("<Case ",N,"> Estimated Contribution based on RV (Multivariate)"), col.main="red", font.main=4)
Contribution_Plot(X_Original_New, Y_Original_New, Alpha=1, Method=2, Thresh=TRUE)
title(main=paste0("<Case ",N,"> Estimated Contribution based on RV (Original X) with Alpha=1"), col.main="red", font.main=4)
Contribution_Plot(X_Original_New, Y_Original_New, Alpha=2, Method=2, Thresh=TRUE)
title(main=paste0("<Case ",N,"> Estimated Contribution based on RV (Original X) with Alpha=2"), col.main="red", font.main=4)
}
B_Stand
B_Star
B_Stand
True_Contribution
True_Contribution
B=B_Star
Contr=c()
for(k in 1:ncol(X)){
Contr$SNP[k]=paste0("SNP",k)
Contr$True_Contrib[k]=sum(abs(B[k,])/sum(abs(B)))  #  Contr[i] : The contribution of the ith independent variable, SNP, in percentage
}
Contr
paste0("SNP",k)
Contr$True_Contrib[k]
B_Star
sum(abs(B))
k
abs(B[k,])
rm(list=ls())                         # Empty the workspace        #
rm(list=ls())                         # Empty the workspace        #
source("Research_Function.R")         # Install the package        #
source("Research_Fundamental.R")      # Import fundamental dataset #
N=101                                   # Case Number
rm(list=ls())
Directory = setwd("C:/Users/JinCheol Choi/Desktop/Soccer_Analysis/")
League = "World_Cup"
load(paste0(Directory,"/Empirical_Winning_Probability/", League, "/Empirical_winning_probability.Rdata"))
load(paste0(Directory,"/Empirical_Winning_Probability/", League, "/Empirical_winning_probability.Rdata"))
rm(list=ls())
load(paste0(Directory,"/Empirical_Winning_Probability/", League, "/Empirical_winning_probability.Rdata"))
Directory = setwd("C:/Users/JinCheol Choi/Desktop/Soccer_Analysis/")
League = "World_Cup"
load(paste0(Directory,"/Empirical_Winning_Probability/", League, "/Empirical_winning_probability.Rdata"))
Directory = setwd("C:/Users/JinCheol Choi/Desktop/Soccer_Analysis/")
League = "World_Cup"
load(paste0(Directory,"/Empirical_Winning_Probability/", League, "/Empirical_winning_probability.Rdata"))
#####################
# Empty the workspace
#####################
rm(list=ls())
###################
# Parameter setting
###################
Directory = setwd("C:/Users/JinCheol Choi/Desktop/Soccer_Analysis/")
League = "World_Cup"
#--- available league
# 1. England_Premium
# 2. World_Cup
######################################
# import empirical winning probability
######################################
load(paste0(Directory,"/Empirical_Winning_Probability/", League, "/Empirical_winning_probability.Rdata"))
