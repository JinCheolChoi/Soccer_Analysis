# Create values
###############
final.bankrole = c()
time.merge = c()
bankrole.merge = c()
final.decision = c()
for(Year in Years){
# specify the directory
Directory = setwd("C:/Users/JinCheol Choi/Desktop/Soccer_Analysis/")
source("Real_Data.R")
source("Decision_Making_Algorithm.R")
if(Year == Years[1]){
initial.bankrole = initial.bankrole
}
if(Year > Years[1]){
initial.bankrole = bankrole.merge[length(bankrole.merge)]
}
# bet according to the decision
if(length(x.axis[which(diff.prob > 0)]) != 0){
temp.bankrole = apply.decision(final.all.chosen.bet, initial.bankrole)
time.merge = c(time.merge, temp.bankrole$Time)
bankrole.merge = c(bankrole.merge, temp.bankrole$capital)
# save all decisions that are made
final.decision = rbind(final.decision, final.all.chosen.bet)
}
}
#####################
# Empty the workspace
#####################
rm(list=ls())
#################
# Rcode directory
#################
# import fundamental functions
Directory = setwd("C:/Users/JinCheol Choi/Desktop/Soccer_Analysis/")
source("Functions.R")
source("Apply_Decision_to_Data.R")
# import empirical winning probability
load(paste0("Empirical_winning_probability.Rdata"))
##################################################
# Data save and load empirical winning probability
##################################################
# the empirical winning probabilities are saved in Logistic_Model.1999~2018
#save.image(paste0("Empirical_winning_probability.Rdata"))
#load(paste0("Empirical_winning_probability.Rdata"))
############
# Parameters
############
Years = 2000 : 2000
initial.bankrole = 10000     # the initial bankrole
ind.bet.money = 100
min.odd = 0
max.odd = 10000000000000000000
###############
# Create values
###############
final.bankrole = c()
time.merge = c()
bankrole.merge = c()
final.decision = c()
for(Year in Years){
# specify the directory
Directory = setwd("C:/Users/JinCheol Choi/Desktop/Soccer_Analysis/")
source("Real_Data.R")
source("Decision_Making_Algorithm.R")
if(Year == Years[1]){
initial.bankrole = initial.bankrole
}
if(Year > Years[1]){
initial.bankrole = bankrole.merge[length(bankrole.merge)]
}
# bet according to the decision
if(length(x.axis[which(diff.prob > 0)]) != 0){
temp.bankrole = apply.decision(final.all.chosen.bet, initial.bankrole)
time.merge = c(time.merge, temp.bankrole$Time)
bankrole.merge = c(bankrole.merge, temp.bankrole$capital)
# save all decisions that are made
final.decision = rbind(final.decision, final.all.chosen.bet)
}
}
# merge time and capital into a single value
final.bankrole$Time = as.Date(time.merge, origin = "1970-01-01")
final.bankrole$capital = bankrole.merge
# plot
plot(final.bankrole$Time, final.bankrole$capital, type = "o")
################
# logistic model
################
Logistic_Model = glm(result.mat ~ joint.odds, data=all.chosen.bet, family = binomial(link='logit'))
plot(all.chosen.bet$joint.odds, all.chosen.bet$result.mat)
curve(predict(Logistic_Model, data.frame(joint.odds=x),type="response"), add=TRUE, col="red")
x.axis=seq(0, 1000, by=0.1)
lines(x.axis, 1/x.axis, col='blue')
number.bet=c()
for(test in 1:length(unique(final.decision$Time))){
number.bet[test]=nrow(final.decision[final.decision$Time==unique(final.decision$Time)[test],])
}
plot(final.bankrole$Time, final.bankrole$capital, type = "o")
bankrole
Time = unique(final.all.chosen.bet$Time)
bankrole = c()
t.ind=1
if(t.ind == 1){
bankrole$Time[1] = Time[t.ind]
bankrole$capital[1] = initial.bankrole
# daily win games
daily.win.games = final.all.chosen.bet[which(final.all.chosen.bet$Time == Time[t.ind] & final.all.chosen.bet$result.mat == 1),]
# balance the capital
bankrole$capital[t.ind] = initial.bankrole + (sum(daily.win.games$joint.odds)-length(which(final.all.chosen.bet$Time == Time[t.ind])))*ind.bet.money
}
bankrole
initial.bankrole
bankrole$capital[t.ind - 1] < 0
bankrole$capital[t.ind - 1]
t.ind
apply.decision = function(final.all.chosen.bet, initial.bankrole){
Time = unique(final.all.chosen.bet$Time)
bankrole = c()
for(t.ind in 1:length(Time)){
#t.ind=1
if(t.ind == 1){
bankrole$Time[1] = Time[t.ind]
bankrole$capital[1] = initial.bankrole
# daily win games
daily.win.games = final.all.chosen.bet[which(final.all.chosen.bet$Time == Time[t.ind] & final.all.chosen.bet$result.mat == 1),]
# balance the capital
bankrole$capital[t.ind] = initial.bankrole + (sum(daily.win.games$joint.odds)-length(which(final.all.chosen.bet$Time == Time[t.ind])))*ind.bet.money
}
if(t.ind > 1){
bankrole$Time[t.ind] = Time[t.ind]
# daily win games
daily.win.games = final.all.chosen.bet[which(final.all.chosen.bet$Time == Time[t.ind] & final.all.chosen.bet$result.mat == 1),]
# balance the capital
if(bankrole$capital[t.ind - 1] < 0){
bankrole$capital[t.ind] = 0
}else{bankrole$capital[t.ind] = bankrole$capital[t.ind - 1] + (sum(daily.win.games$joint.odds)-length(which(final.all.chosen.bet$Time == Time[t.ind])))*ind.bet.money
}
}
}
bankrole$Time = as.Date(bankrole$Time, origin = "1970-01-01")
return(bankrole)
}
if(length(x.axis[which(diff.prob > 0)]) != 0){
temp.bankrole = apply.decision(final.all.chosen.bet, initial.bankrole)
time.merge = c(time.merge, temp.bankrole$Time)
bankrole.merge = c(bankrole.merge, temp.bankrole$capital)
# save all decisions that are made
final.decision = rbind(final.decision, final.all.chosen.bet)
}
apply.decision
temp.bankrole
initial.bankrole
initial.bankrole
bankrole.merge[length(bankrole.merge)]
bankrole$capital[t.ind]
t.ind
if(length(x.axis[which(diff.prob > 0)]) != 0){
temp.bankrole = apply.decision(final.all.chosen.bet, initial.bankrole)
time.merge = c(time.merge, temp.bankrole$Time)
bankrole.merge = c(bankrole.merge, temp.bankrole$capital)
# save all decisions that are made
final.decision = rbind(final.decision, final.all.chosen.bet)
}
temp.bankrole
########################
# apply decision to data
########################
# place bets based on the decisions made
apply.decision = function(final.all.chosen.bet, initial.bankrole){
Time = unique(final.all.chosen.bet$Time)
bankrole = c()
for(t.ind in 1:length(Time)){
#t.ind=1
if(t.ind == 1){
bankrole$Time[1] = Time[t.ind]
bankrole$capital[1] = initial.bankrole
# daily win games
daily.win.games = final.all.chosen.bet[which(final.all.chosen.bet$Time == Time[t.ind] & final.all.chosen.bet$result.mat == 1),]
# balance the capital
bankrole$capital[t.ind] = initial.bankrole + (sum(daily.win.games$joint.odds)-length(which(final.all.chosen.bet$Time == Time[t.ind])))*ind.bet.money
if(bankrole$capital[t.ind] <= 0){
bankrole$capital[t.ind] = 0
}
}
if(t.ind > 1){
bankrole$Time[t.ind] = Time[t.ind]
# daily win games
daily.win.games = final.all.chosen.bet[which(final.all.chosen.bet$Time == Time[t.ind] & final.all.chosen.bet$result.mat == 1),]
# balance the capital
if(bankrole$capital[t.ind - 1] <= 0){
bankrole$capital[t.ind] = 0
}else{bankrole$capital[t.ind] = bankrole$capital[t.ind - 1] + (sum(daily.win.games$joint.odds)-length(which(final.all.chosen.bet$Time == Time[t.ind])))*ind.bet.money
}
}
}
bankrole$Time = as.Date(bankrole$Time, origin = "1970-01-01")
return(bankrole)
}
temp.bankrole = apply.decision(final.all.chosen.bet, initial.bankrole)
temp.bankrole
#####################
# Empty the workspace
#####################
rm(list=ls())
#################
# Rcode directory
#################
# import fundamental functions
Directory = setwd("C:/Users/JinCheol Choi/Desktop/Soccer_Analysis/")
source("Functions.R")
source("Apply_Decision_to_Data.R")
# import empirical winning probability
load(paste0("Empirical_winning_probability.Rdata"))
##################################################
# Data save and load empirical winning probability
##################################################
# the empirical winning probabilities are saved in Logistic_Model.1999~2018
#save.image(paste0("Empirical_winning_probability.Rdata"))
#load(paste0("Empirical_winning_probability.Rdata"))
############
# Parameters
############
Years = 2000 : 2000
initial.bankrole = 10000     # the initial bankrole
ind.bet.money = 100
min.odd = 0
max.odd = 10000000000000000000
###############
# Create values
###############
final.bankrole = c()
time.merge = c()
bankrole.merge = c()
final.decision = c()
for(Year in Years){
# specify the directory
Directory = setwd("C:/Users/JinCheol Choi/Desktop/Soccer_Analysis/")
source("Real_Data.R")
source("Decision_Making_Algorithm.R")
if(Year == Years[1]){
initial.bankrole = initial.bankrole
}
if(Year > Years[1]){
initial.bankrole = bankrole.merge[length(bankrole.merge)]
}
# bet according to the decision
if(length(x.axis[which(diff.prob > 0)]) != 0){
temp.bankrole = apply.decision(final.all.chosen.bet, initial.bankrole)
time.merge = c(time.merge, temp.bankrole$Time)
bankrole.merge = c(bankrole.merge, temp.bankrole$capital)
# save all decisions that are made
final.decision = rbind(final.decision, final.all.chosen.bet)
}
}
# merge time and capital into a single value
final.bankrole$Time = as.Date(time.merge, origin = "1970-01-01")
final.bankrole$capital = bankrole.merge
# plot
plot(final.bankrole$Time, final.bankrole$capital, type = "o")
################
# logistic model
################
Logistic_Model = glm(result.mat ~ joint.odds, data=all.chosen.bet, family = binomial(link='logit'))
plot(all.chosen.bet$joint.odds, all.chosen.bet$result.mat)
curve(predict(Logistic_Model, data.frame(joint.odds=x),type="response"), add=TRUE, col="red")
x.axis=seq(0, 1000, by=0.1)
lines(x.axis, 1/x.axis, col='blue')
number.bet=c()
for(test in 1:length(unique(final.decision$Time))){
number.bet[test]=nrow(final.decision[final.decision$Time==unique(final.decision$Time)[test],])
}
bankrole
Time = unique(final.all.chosen.bet$Time)
bankrole = c()
for(t.ind in 1:length(Time)){
#t.ind=1
if(t.ind == 1){
bankrole$Time[1] = Time[t.ind]
bankrole$capital[1] = initial.bankrole
# daily win games
daily.win.games = final.all.chosen.bet[which(final.all.chosen.bet$Time == Time[t.ind] & final.all.chosen.bet$result.mat == 1),]
# balance the capital
bankrole$capital[t.ind] = initial.bankrole + (sum(daily.win.games$joint.odds)-length(which(final.all.chosen.bet$Time == Time[t.ind])))*ind.bet.money
if(bankrole$capital[t.ind] <= 0){
bankrole$capital[t.ind] = 0
}
}
if(t.ind > 1){
bankrole$Time[t.ind] = Time[t.ind]
# daily win games
daily.win.games = final.all.chosen.bet[which(final.all.chosen.bet$Time == Time[t.ind] & final.all.chosen.bet$result.mat == 1),]
# balance the capital
if(bankrole$capital[t.ind - 1] <= 0){
bankrole$capital[t.ind] = 0
}else{bankrole$capital[t.ind] = bankrole$capital[t.ind - 1] + (sum(daily.win.games$joint.odds)-length(which(final.all.chosen.bet$Time == Time[t.ind])))*ind.bet.money
}
}
}
bankrole
final.decision
temp.bankrole = apply.decision(final.all.chosen.bet, initial.bankrole)
temp.bankrole
########################
# apply decision to data
########################
# place bets based on the decisions made
apply.decision = function(final.all.chosen.bet, initial.bankrole){
Time = unique(final.all.chosen.bet$Time)
bankrole = c()
for(t.ind in 1:length(Time)){
#t.ind=1
if(t.ind == 1){
bankrole$Time[1] = Time[t.ind]
bankrole$capital[1] = initial.bankrole
# daily win games
daily.win.games = final.all.chosen.bet[which(final.all.chosen.bet$Time == Time[t.ind] & final.all.chosen.bet$result.mat == 1),]
# balance the capital
bankrole$capital[t.ind] = initial.bankrole + (sum(daily.win.games$joint.odds)-length(which(final.all.chosen.bet$Time == Time[t.ind])))*ind.bet.money
if(bankrole$capital[t.ind] <= 0){
bankrole$capital[t.ind] = 0
}
}
if(t.ind > 1){
bankrole$Time[t.ind] = Time[t.ind]
# daily win games
daily.win.games = final.all.chosen.bet[which(final.all.chosen.bet$Time == Time[t.ind] & final.all.chosen.bet$result.mat == 1),]
# balance the capital
if(bankrole$capital[t.ind - 1] <= 0){
bankrole$capital[t.ind] = 0
}else{bankrole$capital[t.ind] = bankrole$capital[t.ind - 1] + (sum(daily.win.games$joint.odds)-length(which(final.all.chosen.bet$Time == Time[t.ind])))*ind.bet.money
}
}
}
bankrole$Time = as.Date(bankrole$Time, origin = "1970-01-01")
return(bankrole)
}
temp.bankrole = apply.decision(final.all.chosen.bet, initial.bankrole)
temp.bankrole
#####################
# Empty the workspace
#####################
rm(list=ls())
#################
# Rcode directory
#################
# import fundamental functions
Directory = setwd("C:/Users/JinCheol Choi/Desktop/Soccer_Analysis/")
source("Functions.R")
source("Apply_Decision_to_Data.R")
# import empirical winning probability
load(paste0("Empirical_winning_probability.Rdata"))
##################################################
# Data save and load empirical winning probability
##################################################
# the empirical winning probabilities are saved in Logistic_Model.1999~2018
#save.image(paste0("Empirical_winning_probability.Rdata"))
#load(paste0("Empirical_winning_probability.Rdata"))
############
# Parameters
############
Years = 2000 : 2000
initial.bankrole = 10000     # the initial bankrole
ind.bet.money = 100
min.odd = 0
max.odd = 10000000000000000000
###############
# Create values
###############
final.bankrole = c()
time.merge = c()
bankrole.merge = c()
final.decision = c()
for(Year in Years){
# specify the directory
Directory = setwd("C:/Users/JinCheol Choi/Desktop/Soccer_Analysis/")
source("Real_Data.R")
source("Decision_Making_Algorithm.R")
if(Year == Years[1]){
initial.bankrole = initial.bankrole
}
if(Year > Years[1]){
initial.bankrole = bankrole.merge[length(bankrole.merge)]
}
# bet according to the decision
if(length(x.axis[which(diff.prob > 0)]) != 0){
temp.bankrole = apply.decision(final.all.chosen.bet, initial.bankrole)
time.merge = c(time.merge, temp.bankrole$Time)
bankrole.merge = c(bankrole.merge, temp.bankrole$capital)
# save all decisions that are made
final.decision = rbind(final.decision, final.all.chosen.bet)
}
}
bankrole.merge
temp.bankrole = apply.decision(final.all.chosen.bet, initial.bankrole)
temp.bankrole
temp.bankrole = apply.decision(final.all.chosen.bet, initial.bankrole)
temp.bankrole
bankrole
apply.decision = function(final.all.chosen.bet, initial.bankrole){
Time = unique(final.all.chosen.bet$Time)
bankrole = c()
for(t.ind in 1:length(Time)){
#t.ind=1
if(t.ind == 1){
bankrole$Time[1] = Time[t.ind]
bankrole$capital[1] = initial.bankrole
# daily win games
daily.win.games = final.all.chosen.bet[which(final.all.chosen.bet$Time == Time[t.ind] & final.all.chosen.bet$result.mat == 1),]
# balance the capital
bankrole$capital[t.ind] = initial.bankrole + (sum(daily.win.games$joint.odds)-length(which(final.all.chosen.bet$Time == Time[t.ind])))*ind.bet.money
if(bankrole$capital[t.ind] <= 0){
bankrole$capital[t.ind] = 0
}
}
if(t.ind > 1){
bankrole$Time[t.ind] = Time[t.ind]
# daily win games
daily.win.games = final.all.chosen.bet[which(final.all.chosen.bet$Time == Time[t.ind] & final.all.chosen.bet$result.mat == 1),]
# balance the capital
if(bankrole$capital[t.ind - 1] <= 0){
bankrole$capital[t.ind] = 0
}else{bankrole$capital[t.ind] = bankrole$capital[t.ind - 1] + (sum(daily.win.games$joint.odds)-length(which(final.all.chosen.bet$Time == Time[t.ind])))*ind.bet.money
}
}
}
bankrole$Time = as.Date(bankrole$Time, origin = "1970-01-01")
return(bankrole)
}
temp.bankrole = apply.decision(final.all.chosen.bet, initial.bankrole)
temp.bankrole
source("Apply_Decision_to_Data.R")
temp.bankrole = apply.decision(final.all.chosen.bet, initial.bankrole)
temp.bankrole
length(x.axis[which(diff.prob > 0)]) != 0
#####################
# Empty the workspace
#####################
rm(list=ls())
#################
# Rcode directory
#################
# import fundamental functions
Directory = setwd("C:/Users/JinCheol Choi/Desktop/Soccer_Analysis/")
source("Functions.R")
source("Apply_Decision_to_Data.R")
# import empirical winning probability
load(paste0("Empirical_winning_probability.Rdata"))
##################################################
# Data save and load empirical winning probability
##################################################
# the empirical winning probabilities are saved in Logistic_Model.1999~2018
#save.image(paste0("Empirical_winning_probability.Rdata"))
#load(paste0("Empirical_winning_probability.Rdata"))
############
# Parameters
############
Years = 2000 : 2000
initial.bankrole = 10000     # the initial bankrole
ind.bet.money = 100
min.odd = 0
max.odd = 10000000000000000000
final.bankrole = c()
time.merge = c()
bankrole.merge = c()
final.decision = c()
Year=Years
Directory = setwd("C:/Users/JinCheol Choi/Desktop/Soccer_Analysis/")
source("Real_Data.R")
source("Decision_Making_Algorithm.R")
if(Year == Years[1]){
initial.bankrole = initial.bankrole
}
if(Year > Years[1]){
initial.bankrole = bankrole.merge[length(bankrole.merge)]
}
length(x.axis[which(diff.prob > 0)]) != 0
apply.decision(final.all.chosen.bet, initial.bankrole)
apply.decision(final.all.chosen.bet, initial.bankrole)
final.all.chosen.bet
final.all.chosen.bet
initial.bankrole
apply.decision = function(final.all.chosen.bet, initial.bankrole){
Time = unique(final.all.chosen.bet$Time)
bankrole = c()
for(t.ind in 1:length(Time)){
#t.ind=1
if(t.ind == 1){
bankrole$Time[1] = Time[t.ind]
bankrole$capital[1] = initial.bankrole
# daily win games
daily.win.games = final.all.chosen.bet[which(final.all.chosen.bet$Time == Time[t.ind] & final.all.chosen.bet$result.mat == 1),]
# balance the capital
bankrole$capital[t.ind] = initial.bankrole + (sum(daily.win.games$joint.odds)-length(which(final.all.chosen.bet$Time == Time[t.ind])))*ind.bet.money
if(bankrole$capital[t.ind] <= 0){
bankrole$capital[t.ind] = 0
}
}
if(t.ind > 1){
bankrole$Time[t.ind] = Time[t.ind]
# daily win games
daily.win.games = final.all.chosen.bet[which(final.all.chosen.bet$Time == Time[t.ind] & final.all.chosen.bet$result.mat == 1),]
# balance the capital
if(bankrole$capital[t.ind - 1] <= 0){
bankrole$capital[t.ind] = 0
}else{bankrole$capital[t.ind] = bankrole$capital[t.ind - 1] + (sum(daily.win.games$joint.odds)-length(which(final.all.chosen.bet$Time == Time[t.ind])))*ind.bet.money
}
}
}
bankrole$Time = as.Date(bankrole$Time, origin = "1970-01-01")
return(bankrole)
}
apply.decision(final.all.chosen.bet, initial.bankrole)
