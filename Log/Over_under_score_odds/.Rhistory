sink(my_log, append = TRUE, type = "message")
# In docker, run the following line first
#docker run -d -p 4445:4444 selenium/standalone-chrome:3.141.59
system_sleep=3
source(paste0(CODE.dir.2, "Extract_Over_under_score_odds.R"))
# Close connection to log file
closeAllConnections()
# loop every 6 hours
Sys.sleep(12*60*60)
}
# Close connection to log file
closeAllConnections()
#********************
#
# empty the workspace
#
#********************
rm(list=ls())
#*******************
#
# set directory path
#
#*******************
# CODE.dir.1="C:/Users/JinCheol Choi/Desktop/R/Functions/"
# CODE.dir.2="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/"
# CODE.dir.1="C:/Users/JinCheol Choi/Desktop/R/Functions/"
# CODE.dir.2="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/"
CODE.dir.1="C:/Users/JinCheol Choi/Desktop/R/Functions/"
CODE.dir.2="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/"
Year=2020
Countries=c(
"england",
"spain",
"italy",
"netherlands",
"germany",
"china",
"japan",
"turkey"
)
# england : "premier-league", "championship", "league-one", "league-two"
# spain : "laliga"
# italy : "serie-a"
# netherlands : "eerste-divisie"
# germany : "3-liga"
# china : "super-league"
# japan : "j1-league", "j2-league"
# turkey : "super-lig
Leagues=c(
"premier-league",
"championship",
"league-one",
"league-two",
"laliga",
"serie-a",
"eerste-divisie",
"3-liga",
"super-league",
"j1-league",
"j2-league",
"super-lig"
)
source(paste0(CODE.dir.1, "Functions.R"))
source(paste0(CODE.dir.2, "SA_Functions.R"))
lapply(c("data.table",
"rvest",
"stringr",
"dplyr",
"magrittr",
"RSelenium",
"profvis",
"ggplot2",
"readr", # readr::parse_number
"reshape2"), # melt() and dcast()
checkpackages)
#*******************************
#
# Extract_Data_Game_Results ----
#
#*******************************
Years=2020
data.dir.1="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Data/Game_results/"
lapply(c("data.table",
"rvest"), checkpackages)
source(paste0(CODE.dir.2, "Extract_Data_Game_Results.R"))
#********************************
#
# Over_Under_Score_Algorithm ----
#
#********************************
# load
#*****
#load("C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Rdata/2020-10-24-Uni-Dist.Rdata")
load("C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Rdata/2020-10-11-to-25.Rdata")
Optimal_Settings
Optimal_Pars="No" # use optimal parameters based on Optimal_Settings
Prob_Estimate="Exact"
Chosen_Profit_Criteria=1
Coef=1/5.8
data.dir.1="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Data/Game_results/"
# data.dir.2="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Data/Over_under_score_odds/"
output.dir="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Output/Over_under_score_odds/"
log.dir="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Log/Over_under_score_odds/"
source(paste0(CODE.dir.1, "Functions.R"))
source(paste0(CODE.dir.2, "SA_Functions.R"))
#*********
# save log
#*********
setwd(paste0(log.dir))
#setwd(paste0(log.dir,  Country, "/", League, "/"))
Loop=0
while(Loop==0){
# generate log file
New_Log=0
Log_N=1
while(New_Log==0){
Log_File_Lists=list.files(log.dir)
File_Name=paste0(Sys.Date(), "-", Log_N, ".txt")
if(sum(Log_File_Lists%in%File_Name)>0){
Log_N=Log_N+1
}else{
my_log=file(File_Name)
New_Log=1
}
}
sink(my_log, append = TRUE, type = "output") # Writing console output to log file
sink(my_log, append = TRUE, type = "message")
# In docker, run the following line first
#docker run -d -p 4445:4444 selenium/standalone-chrome:3.141.59
system_sleep=3
source(paste0(CODE.dir.2, "Extract_Over_under_score_odds.R"))
# Close connection to log file
closeAllConnections()
# loop every 6 hours
Sys.sleep(12*60*60)
}
#********************
#
# empty the workspace
#
#********************
rm(list=ls())
#*******************
#
# set directory path
#
#*******************
# CODE.dir.1="C:/Users/JinCheol Choi/Desktop/R/Functions/"
# CODE.dir.2="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/"
# CODE.dir.1="C:/Users/JinCheol Choi/Desktop/R/Functions/"
# CODE.dir.2="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/"
CODE.dir.1="C:/Users/JinCheol Choi/Desktop/R/Functions/"
CODE.dir.2="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/"
Year=2020
Countries=c(
"england",
"spain",
"italy",
"netherlands",
"germany",
"china",
"japan",
"turkey"
)
# england : "premier-league", "championship", "league-one", "league-two"
# spain : "laliga"
# italy : "serie-a"
# netherlands : "eerste-divisie"
# germany : "3-liga"
# china : "super-league"
# japan : "j1-league", "j2-league"
# turkey : "super-lig
Leagues=c(
"premier-league",
"championship",
"league-one",
"league-two",
"laliga",
"serie-a",
"eerste-divisie",
"3-liga",
"super-league",
"j1-league",
"j2-league",
"super-lig"
)
source(paste0(CODE.dir.1, "Functions.R"))
source(paste0(CODE.dir.2, "SA_Functions.R"))
lapply(c("data.table",
"rvest",
"stringr",
"dplyr",
"magrittr",
"RSelenium",
"profvis",
"ggplot2",
"readr", # readr::parse_number
"reshape2"), # melt() and dcast()
checkpackages)
#*******************************
#
# Extract_Data_Game_Results ----
#
#*******************************
Years=2020
data.dir.1="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Data/Game_results/"
lapply(c("data.table",
"rvest"), checkpackages)
source(paste0(CODE.dir.2, "Extract_Data_Game_Results.R"))
#********************************
#
# Over_Under_Score_Algorithm ----
#
#********************************
# load
#*****
#load("C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Rdata/2020-10-24-Uni-Dist.Rdata")
load("C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Rdata/2020-10-11-to-25.Rdata")
Optimal_Settings
Optimal_Pars="No" # use optimal parameters based on Optimal_Settings
Prob_Estimate="Exact"
Chosen_Profit_Criteria=1
Coef=1/5.8
data.dir.1="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Data/Game_results/"
# data.dir.2="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Data/Over_under_score_odds/"
output.dir="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Output/Over_under_score_odds/"
log.dir="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Log/Over_under_score_odds/"
source(paste0(CODE.dir.1, "Functions.R"))
source(paste0(CODE.dir.2, "SA_Functions.R"))
#*********
# save log
#*********
setwd(paste0(log.dir))
#setwd(paste0(log.dir,  Country, "/", League, "/"))
Loop=0
while(Loop==0){
# generate log file
New_Log=0
Log_N=1
while(New_Log==0){
Log_File_Lists=list.files(log.dir)
File_Name=paste0(Sys.Date(), "-", Log_N, ".txt")
if(sum(Log_File_Lists%in%File_Name)>0){
Log_N=Log_N+1
}else{
my_log=file(File_Name)
New_Log=1
}
}
sink(my_log, append = TRUE, type = "output") # Writing console output to log file
sink(my_log, append = TRUE, type = "message")
# In docker, run the following line first
#docker run -d -p 4445:4444 selenium/standalone-chrome:3.141.59
system_sleep=3
source(paste0(CODE.dir.2, "Extract_Over_under_score_odds.R"))
# Close connection to log file
closeAllConnections()
# loop every 6 hours
Sys.sleep(12*60*60)
}
# Close connection to log file
closeAllConnections()
#********************
#
# empty the workspace
#
#********************
rm(list=ls())
#*******************
#
# set directory path
#
#*******************
# CODE.dir.1="C:/Users/JinCheol Choi/Desktop/R/Functions/"
# CODE.dir.2="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/"
# CODE.dir.1="C:/Users/JinCheol Choi/Desktop/R/Functions/"
# CODE.dir.2="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/"
CODE.dir.1="C:/Users/JinCheol Choi/Desktop/R/Functions/"
CODE.dir.2="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/"
Year=2020
Countries=c(
"england",
"spain",
"italy",
"netherlands",
"germany",
"china",
"japan",
"turkey"
)
# england : "premier-league", "championship", "league-one", "league-two"
# spain : "laliga"
# italy : "serie-a"
# netherlands : "eerste-divisie"
# germany : "3-liga"
# china : "super-league"
# japan : "j1-league", "j2-league"
# turkey : "super-lig
Leagues=c(
"premier-league",
"championship",
"league-one",
"league-two",
"laliga",
"serie-a",
"eerste-divisie",
"3-liga",
"super-league",
"j1-league",
"j2-league",
"super-lig"
)
source(paste0(CODE.dir.1, "Functions.R"))
source(paste0(CODE.dir.2, "SA_Functions.R"))
lapply(c("data.table",
"rvest",
"stringr",
"dplyr",
"magrittr",
"RSelenium",
"profvis",
"ggplot2",
"readr", # readr::parse_number
"reshape2"), # melt() and dcast()
checkpackages)
#*******************************
#
# Extract_Data_Game_Results ----
#
#*******************************
Years=2020
data.dir.1="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Data/Game_results/"
lapply(c("data.table",
"rvest"), checkpackages)
source(paste0(CODE.dir.2, "Extract_Data_Game_Results.R"))
#********************************
#
# Over_Under_Score_Algorithm ----
#
#********************************
# load
#*****
#load("C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Rdata/2020-10-24-Uni-Dist.Rdata")
load("C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Rdata/2020-10-11-to-25.Rdata")
Optimal_Settings
Optimal_Pars="No" # use optimal parameters based on Optimal_Settings
Prob_Estimate="Exact"
Chosen_Profit_Criteria=1
Coef=1/5.8
data.dir.1="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Data/Game_results/"
# data.dir.2="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Data/Over_under_score_odds/"
output.dir="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Output/Over_under_score_odds/"
log.dir="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Log/Over_under_score_odds/"
source(paste0(CODE.dir.1, "Functions.R"))
source(paste0(CODE.dir.2, "SA_Functions.R"))
#*********
# save log
#*********
setwd(paste0(log.dir))
#setwd(paste0(log.dir,  Country, "/", League, "/"))
Loop=0
while(Loop==0){
# generate log file
New_Log=0
Log_N=1
while(New_Log==0){
Log_File_Lists=list.files(log.dir)
File_Name=paste0(Sys.Date(), "-", Log_N, ".txt")
if(sum(Log_File_Lists%in%File_Name)>0){
Log_N=Log_N+1
}else{
my_log=file(File_Name)
New_Log=1
}
}
sink(my_log, append = TRUE, type = "output") # Writing console output to log file
sink(my_log, append = TRUE, type = "message")
# In docker, run the following line first
#docker run -d -p 4445:4444 selenium/standalone-chrome:3.141.59
system_sleep=3
source(paste0(CODE.dir.2, "Extract_Over_under_score_odds.R"))
# Close connection to log file
closeAllConnections()
# loop every 6 hours
Sys.sleep(12*60*60)
}
# Close connection to log file
closeAllConnections()
#********************
#
# empty the workspace
#
#********************
rm(list=ls())
#***********
#
# parameters
#
#***********
# working directory
#working.dir="C:/Users/JinCheol Choi/Desktop/R/Stock_Analysis/" # desktop
working.dir="C:/Users/jchoi02/Desktop/R/Stock_Analysis/" # laptop
# BarSize
BarSize=60*5
#*****************
#
# preliminary step
#
#*******************
# required functions
source(paste0(working.dir, "0. Stock_Analysis_Functions.R"))
# import packages
lapply(
c(
"IBrokers",
"TTR",
"data.table",
"dplyr",
"DescTools" # candle chart
),
checkpackages)
#*********************
#
# simulation algorithm
#
#*******************************
Years=2020
data.dir.1="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Data/Game_results/"
lapply(c("data.table",
"rvest"), checkpackages)
source(paste0(CODE.dir.2, "Extract_Data_Game_Results.R"))
#********************************
#
# Over_Under_Score_Algorithm ----
#
#********************************
# load
#*****
#load("C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Rdata/2020-10-24-Uni-Dist.Rdata")
load("C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Rdata/2020-10-11-to-25.Rdata")
Optimal_Settings
Optimal_Pars="No" # use optimal parameters based on Optimal_Settings
Prob_Estimate="Exact"
Chosen_Profit_Criteria=1
Coef=1/5.8
data.dir.1="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Data/Game_results/"
# data.dir.2="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Data/Over_under_score_odds/"
output.dir="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Output/Over_under_score_odds/"
log.dir="C:/Users/JinCheol Choi/Desktop/R/Soccer_Analysis/Log/Over_under_score_odds/"
source(paste0(CODE.dir.1, "Functions.R"))
source(paste0(CODE.dir.2, "SA_Functions.R"))
#*********
# save log
#*********
setwd(paste0(log.dir))
#setwd(paste0(log.dir,  Country, "/", League, "/"))
Loop=0
while(Loop==0){
# generate log file
New_Log=0
Log_N=1
while(New_Log==0){
Log_File_Lists=list.files(log.dir)
File_Name=paste0(Sys.Date(), "-", Log_N, ".txt")
if(sum(Log_File_Lists%in%File_Name)>0){
Log_N=Log_N+1
}else{
Live_Data=rbind(Live_Data, Collapsed_BarData[i, ], fill=T) %>% tail(Live_Data_Max_Rows)
}
# add indicators
# bollinger bands
if("BBands"%in%Indicators){
Long_By_pctB=0
Short_By_pctB=0
if(nrow(Live_Data)>19){
BBands_Data=Live_Data[, BBands(Close)]
# determine position by pctB
if(Order_Direction=="both"){
Long_By_pctB=sum(tail(BBands_Data, Consec_Times)[,"pctB"]<=Long_PctB, na.rm=T)==Consec_Times
Short_By_pctB=sum(tail(BBands_Data, Consec_Times)[,"pctB"]>=Short_PctB, na.rm=T)==Consec_Times
}else if(Order_Direction=="long"){
Long_By_pctB=sum(tail(BBands_Data, Consec_Times)[,"pctB"]<=Long_PctB, na.rm=T)==Consec_Times
Short_By_pctB=sum(tail(BBands_Data, 1)[,"pctB"]>=Short_PctB, na.rm=T)==1
}else if(Order_Direction=="short"){
Long_By_pctB=sum(tail(BBands_Data, 1)[,"pctB"]<=Long_PctB, na.rm=T)==1
Short_By_pctB=sum(tail(BBands_Data, Consec_Times)[,"pctB"]>=Short_PctB, na.rm=T)==Consec_Times
}
}
}
# rsi
if("RSI"%in%Indicators){
if(nrow(Live_Data)>15){
Live_Data[, RSI:=RSI(Close)]
}
}
# macd
if("MACD"%in%Indicators){
if(nrow(Live_Data)>34){
MACD_Data=Live_Data[, MACD(Close)]
}
}
#**************
# fill position
#**************
# buy
if(nrow(Order_Transmit[Action=="Buy"&Fill==0, ])>0){
Unfilled_Buy_Position_Times=Order_Transmit[Action=="Buy"&Fill==0, Submit_Time]
Unfilled_Buy_Position_Prices=Order_Transmit[Submit_Time%in%Unfilled_Buy_Position_Times, LmtPrice]
Which_Buy_Position_to_Fill=which(tail(Live_Data, 1)[, Low]<Unfilled_Buy_Position_Prices)[1] # fill the earlier one among positions that have met the price criterion
Order_Transmit[Submit_Time==Unfilled_Buy_Position_Times[Which_Buy_Position_to_Fill],
`:=`(Filled_Time=tail(Live_Data, 1)[, Time],
Fill=1)]
}
# sell
if(nrow(Order_Transmit[Action=="Sell"&Fill==0, ])>0){
Unfilled_Sell_Position_Times=Order_Transmit[Action=="Sell"&Fill==0, Submit_Time]
Unfilled_Sell_Position_Prices=Order_Transmit[Submit_Time%in%Unfilled_Sell_Position_Times, LmtPrice]
Which_Sell_Position_to_Fill=which(tail(Live_Data, 1)[, High]>Unfilled_Sell_Position_Prices)[1] # fill the earlier one among positions that have met the price criterion
Order_Transmit[Submit_Time==Unfilled_Sell_Position_Times[Which_Sell_Position_to_Fill],
`:=`(Filled_Time=tail(Live_Data, 1)[, Time],
Fill=1)]
}
#******************
# transmit position
#******************
# buy
if(Long_By_pctB){
# determine the position
if(sum(Order_Transmit[Action=="Buy", TotalQuantity])-
sum(Order_Transmit[Action=="Sell", TotalQuantity])<=
(Long_Max_Positions)){ # the number of currently filled or transmitted long positions is limited to (Max_Positions + short positions)
print(paste0("buy : ", i))
Order_Transmit=rbind(Order_Transmit,
data.table(Symbol=tail(Live_Data, 1)[, Symbol],
Submit_Time=tail(Live_Data, 1)[, Time],
Filled_Time=tail(Live_Data, 1)[, Time],
Action="Buy",
TotalQuantity=1,
OrderType=OrderType,
LmtPrice=tail(Live_Data, 1)[, Close],
Fill=0))
}
}
# sell
if(Short_By_pctB){
if(sum(Order_Transmit[Action=="Sell", TotalQuantity])-
sum(Order_Transmit[Action=="Buy", TotalQuantity])<=
(Short_Max_Positions)){ # the number of currently filled or transmitted short positions is limited to (Max_Positions + long positions)
print(paste0("sell : ", i))
Order_Transmit=rbind(Order_Transmit,
data.table(Symbol=tail(Live_Data, 1)[, Symbol],
Submit_Time=tail(Live_Data, 1)[, Time],
Filled_Time=tail(Live_Data, 1)[, Time],
Action="Sell",
TotalQuantity=1,
OrderType=OrderType,
LmtPrice=tail(Live_Data, 1)[, Close],
Fill=0))
}
}
}
Order_Transmit=Order_Transmit[-1, ]
rm(Live_Data)
})
# calculate the balance
Collapse_Order_Transmit=cbind(Order_Transmit[Action=="Buy",
c("Filled_Time", "LmtPrice")],
Order_Transmit[Action=="Sell",
c("Filled_Time", "LmtPrice")])
colnames(Collapse_Order_Transmit)=c("Buy_Time", "Buy_Price", "Sell_Time", "Sell_Price")
Collapse_Order_Transmit=Collapse_Order_Transmit[-unique(c(which(duplicated(Collapse_Order_Transmit[, c("Buy_Time", "Buy_Price")])),
which(duplicated(Collapse_Order_Transmit[, c("Sell_Time", "Sell_Price")])))), ]
2*sum(Collapse_Order_Transmit[, Sell_Price-Buy_Price])-0.52*nrow(Collapse_Order_Transmit)
Collapse_Order_Transmit
#
list()
#
list(list())
#
list(x=1, y=2)
#
?Reduce
#
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
x
# compute the list mean for each list element
lapply(x,mean)
x
data.matrix(x)
# compute the list mean for each list element
lapply(data.matrix(x),mean)
# compute the list mean for each list element
lapply(x,mean)
x
?do.call()
#
x <- list(a = 1:10,
beta = exp(-3:3),
logic = c(TRUE,FALSE,FALSE,TRUE))
#
y <- list(a = 1:10,
beta = exp(-3:3),
logic = c(TRUE,FALSE,FALSE,TRUE))
list(x, y)
list(Bol=x, y)
